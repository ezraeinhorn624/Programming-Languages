#lang racket
(provide (all-defined-out))
(define LAMBDA (string->symbol "\u03BB"))

(define (typecheck x y) 
	(if (equal? x y) x LAMBDA)
)

(define (app x y) 
	(string->symbol (string-append (symbol->string x) "!" (symbol->string y)))
)

(define (create_list x y a b c) 
	(cond	((and (equal? x '()) (equal? y '())) (list a b c))
   		((equal? (car x) (car y)) (create_list (cdr x) (cdr y) a b c))
   		(else (create_list (cdr x) (cdr y) (cons (app (car x) (car y)) a) (cons (car x) b) (cons (car y) c)))
   	)
)
  
(define (xval x y a b) 
	(cond	((equal? x '()) '())
  		((or 	(and (list? (car x)) (not (list? (car y)))) 
       			(and (not (list? (car x))) (list? (car y)))
       			(and (list? (car x)) (list? (car y)) (not (equal? (length (car x)) (length (car y)))))
		 )
   		 (cons (check_constants (car x) (car y)) (xval (cdr x) (cdr y) a b))
		)
  		((and (list? (car x)) (or (equal? (car (car x)) 'lambda) (equal? (car (car y)) 'lambda)
                            (equal? (car (car x)) LAMBDA) (equal? (car (car y)) LAMBDA)))
   			(cons (expr-compare (car x) (car y)) (xval (cdr x) (cdr y) a b)))
  		((list? (car x)) (cons (xval (car x) (car y) a b) (xval (cdr x) (cdr y) a b)))
  		((member (car x) b) (cons (let ((i (index b 0 (car x)))) (list-ref a i)) (xval (cdr x) (cdr y) a b)))
  		(else (cons (car x) (xval (cdr x) (cdr y) a b)))
  	)
)

(define (index lst i x) 
	(if (equal? x (car lst)) i (index (cdr lst) (+ i 1) x))
)

(define (check x y)
	(if (or (equal? x '()) (equal? y '())) '() (cons (expr-compare (car x) (car y)) (check (cdr x) (cdr y))))
)

(define (checkLambda x y)
	(let	((xC (list-ref x 1)) (yC (list-ref y 1)))
    		(let ((r 
	      		(if (and (list? xC) (list? yC) (equal? (length xC) (length yC))) (create_list xC yC '() '() '())
      			(if (and (not (list? xC)) (not (list? yC))) (create_list (list xC) (list yC) '() '() '()) #f))))
        		(if r (cons (typecheck (car x) (car y))
            			(expr-compare
              			(xval (cdr x) (cdr y) (car r) (list-ref r 1))
              			(xval (cdr y) (cdr x) (car r) (list-ref r 1))))
	      			(check_constants x y)
			)
		)
	)
)

(define (initial_check x y) 
	(cond	((equal? (car x) 'quote) (check_constants x y))
   		((equal? (car x) 'lambda) (checkLambda x y))
   		((equal? (car x) LAMBDA) (checkLambda x y))
   		(else (check x y))
	)
)

(define (next_check x y)
	(cond	((or (equal? (car x) 'quote) (equal? (car y) 'quote) (equal? (car x) 'if) (equal? (car y) 'if)) (check_constants x y))
   		((or (and (equal? (car x) 'lambda) (equal? (car y) LAMBDA)) (and (equal? (car y) 'lambda) (equal? (car x) LAMBDA))) (checkLambda x y))
   		(else (check x y))
	)
)

(define (check_constants x y)
	(cond	((equal? x y) x)
		((and (equal? x #f) (equal? y #t)) '(not %))
   		((and (equal? x #t) (equal? y #f)) '%)
   		(else (list 'if '% x y))
	)
)

(define (expr-compare x y)
	(if (and (list? x) (list? y))
    		(if (equal? (length x) (length y))
      			(if (equal? (car x) (car y)) (initial_check x y) (next_check x y))
      			(check_constants x y))
    		(check_constants x y)
	)
)

(define (test-expr-compare x y)
	(and	(equal? (eval x) (eval (list 'let '((% #t)) (expr-compare x y)))) 
       		(equal? (eval y) (eval (list 'let '((% #f)) (expr-compare x y))))
	)
)

;(define test-expr-x '(if #f ((lambda (a b c d) (list (* b c) (+ b 12) (if (> c 0) ((Î» (a d) (+ a d)) 6 13) 2))) 8 9 10 11) (list (member 10 (quote (7 6 5 4))) #f)))
;(define test-expr-y '(if #t ((lambda (a c b d) (list (* b c) (+ b 5) (if (< c 4) ((lambda (a x) (+ x a)) 12 7) 4))) 1 2 3 4) (append (member 10  '(5 6 7 8)) #t)))

;(test-expr-compare test-expr-x test-expr-y)
